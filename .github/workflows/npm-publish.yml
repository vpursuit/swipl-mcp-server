name: Publish to NPM

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run tests without publishing'
        required: false
        default: true
        type: boolean

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  NPM_REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install jq for JSON processing
        run: sudo apt-get install -y jq

      - name: Run security audit
        run: npm run security:audit

      - name: Check for high/critical vulnerabilities
        run: npm run security:check

  build-and-test:
    name: Build and Test
    needs: security-audit
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install SWI-Prolog
        run: |
          sudo apt-get update
          sudo apt-get install -y swi-prolog

      - name: Verify SWI-Prolog installation
        run: swipl --version

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Build TypeScript
        run: npm run build

      - name: Build distribution package
        run: npm run build:package

      - name: Test NPX installation
        run: npm run test:npx

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-package
          path: dist/
          retention-days: 7

      - name: Check package size
        run: |
          cd dist
          npm pack --dry-run

  publish:
    name: Publish to NPM
    needs: [security-audit, build-and-test]
    runs-on: ubuntu-22.04

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NPM_REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-package
          path: dist/

      - name: Check existing versions
        id: check_version
        run: |
          PACKAGE_NAME="@vpursuit/swipl-mcp-server"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "Checking if $PACKAGE_NAME@$PACKAGE_VERSION already exists..."

          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already exists on NPM"
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION does not exist, safe to publish"
            echo "version_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.check_version.outputs.version_exists == 'false' && inputs.dry_run != true
        run: |
          cd dist
          npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Dry Run - Show what would be published
        if: inputs.dry_run == true
        run: |
          cd dist
          echo "DRY RUN: Would publish the following package:"
          npm pack --dry-run

      - name: Create GitHub Release
        if: steps.check_version.outputs.version_exists == 'false' && inputs.dry_run != true
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          gh release create "v$PACKAGE_VERSION" \
            --title "Release v$PACKAGE_VERSION" \
            --notes "Released to NPM as @vpursuit/swipl-mcp-server@$PACKAGE_VERSION

          Install with: \`npm install -g @vpursuit/swipl-mcp-server\`

          ## Requirements
          - Node.js â‰¥ 20.0.0
          - SWI-Prolog installed and available in PATH"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}